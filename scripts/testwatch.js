// Generated by CoffeeScript 1.3.3
(function() {
  var checkForNewFiles, fs, getFiles, path, runTest, separator, spawn, test, walk, watchFile, watchedFiles, _;

  fs = require("fs");

  path = require("path");

  _ = require("underscore");

  spawn = require("child_process").spawn;

  separator = path.sep || "/";

  runTest = function(specFile) {
    var args, opts, proc;
    console.log("Running test: " + specFile + "...");
    args = ["-R list", "--compilers coffee:coffee-script", "--require should", specFile];
    opts = {
      env: {
        NODE_ENV: "test",
        NODE_PATH: "./src/server"
      }
    };
    proc = spawn("mocha " + specFile, args, opts);
    proc.stdout.pipe(process.stdout);
    proc.stderr.pipe(process.stderr);
    return proc.on("exit", function(code) {
      return console.log("child process exited with code " + code);
    });
  };

  watchedFiles = {};

  watchFile = function(file) {
    console.log("watch file", file);
    if (!watchedFiles[file]) {
      fs.watchFile(file, function(curr, prev) {
        if (curr.mtime > prev.mtime) {
          return test(file);
        }
      });
    }
    return watchedFiles[file] = true;
  };

  walk = function(dir) {
    var file, files, list, _i, _len;
    list = [];
    files = fs.readdirSync(dir);
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      file = [dir, file].join(separator);
      if (fs.statSync(file).isDirectory()) {
        list = list.concat(walk(file));
      } else {
        if (file.indexOf(".coffee") >= 0) {
          list.push(file);
        }
      }
    }
    return list;
  };

  getFiles = function() {
    return walk("src").concat(walk("spec"));
  };

  test = function(file) {
    var filePath, specFile;
    console.log("Change detected", file);
    if (file.indexOf(".coffee") <= 0) {
      return;
    }
    filePath = file.split(separator);
    filePath[0] = "spec";
    specFile = filePath.join(separator);
    if (specFile.indexOf(".spec.coffee") === -1) {
      specFile = specFile.replace(".coffee", ".spec.coffee");
    }
    if (fs.existsSync(specFile)) {
      return runTest(specFile);
    } else {
      return console.log("Test " + specFile + " doesn't exist.");
    }
  };

  getFiles().forEach(watchFile);

  checkForNewFiles = function() {
    var added, filepath, _i, _len, _results;
    added = _.difference(getFiles(), Object.keys(watchedFiles));
    _results = [];
    for (_i = 0, _len = added.length; _i < _len; _i++) {
      filepath = added[_i];
      _results.push(watchFile(filepath));
    }
    return _results;
  };

  setInterval(checkForNewFiles, 200);

}).call(this);
